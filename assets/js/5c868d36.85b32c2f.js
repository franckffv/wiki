"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5589],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(r),u=n,k=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return r?a.createElement(k,i(i({ref:t},c),{},{components:r})):a.createElement(k,i({ref:t},c))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},187:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:1},i="Step 1: SetUp server",s={unversionedId:"tutorial-basics/create-a-page",id:"tutorial-basics/create-a-page",title:"Step 1: SetUp server",description:"Install docker and docker-compose",source:"@site/docs/tutorial-basics/create-a-page.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/create-a-page",permalink:"/wiki/docs/tutorial-basics/create-a-page",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/create-a-page.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Costum PasS",permalink:"/wiki/docs/category/tutorial---costum-pass"},next:{title:"Create a Document",permalink:"/wiki/docs/tutorial-basics/create-a-document"}},l={},p=[{value:"Install docker and docker-compose",id:"install-docker-and-docker-compose",level:2},{value:"Set up the repository",id:"set-up-the-repository",level:2},{value:"Install Docker Engine",id:"install-docker-engine",level:2},{value:"Setting up docker swarm with traefik and portainer",id:"setting-up-docker-swarm-with-traefik-and-portainer",level:2},{value:"Intro",id:"intro",level:2},{value:"What is traefik?",id:"what-is-traefik",level:3},{value:"What is Docker Swarm?",id:"what-is-docker-swarm",level:3},{value:"Init Docker Swarm",id:"init-docker-swarm",level:3},{value:"Create a traefik network",id:"create-a-traefik-network",level:3},{value:"Create a htpasswd password",id:"create-a-htpasswd-password",level:3},{value:"Create folders for Traefik",id:"create-folders-for-traefik",level:3},{value:"Traefik docker compose",id:"traefik-docker-compose",level:3},{value:"Portainer",id:"portainer",level:3},{value:"Deploy new app with docker-compose",id:"deploy-new-app-with-docker-compose",level:2},{value:"Example for deploying gitlab CE",id:"example-for-deploying-gitlab-ce",level:3},{value:"Deploy mattermost",id:"deploy-mattermost",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"step-1-setup-server"},"Step 1: SetUp server"),(0,n.kt)("h2",{id:"install-docker-and-docker-compose"},"Install docker and docker-compose"),(0,n.kt)("p",null,"Follow the instructions on the official website to install docker and docker-compose on your machine.\nInstall Docker Engine on Debian : ",(0,n.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/debian/"},"https://docs.docker.com/engine/install/debian/")),(0,n.kt)("h1",{id:"for-debian-11-in-2023"},"For debian 11 in 2023"),(0,n.kt)("p",null,"Uninstall old docker version "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get remove docker docker-engine docker.io containerd runc\n")),(0,n.kt)("h2",{id:"set-up-the-repository"},"Set up the repository"),(0,n.kt)("p",null,"Update the apt package index and install packages to allow apt to use a repository over HTTPS:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," sudo apt-get update\n\n sudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Add Docker\u2019s official GPG key:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," sudo install -m 0755 -d /etc/apt/keyrings\n\n curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n sudo chmod a+r /etc/apt/keyrings/docker.gpg\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Use the following command to set up the repository:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'    echo \\\n      "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\\n      "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \\\n      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n')),(0,n.kt)("h2",{id:"install-docker-engine"},"Install Docker Engine"),(0,n.kt)("p",null,"This procedure works for Debian on x86_64 / amd64, armhf, arm64, and Raspbian."),(0,n.kt)("p",null,"Update the apt package index:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," sudo apt-get update\n")),(0,n.kt)("p",null,"Install Docker Engine, containerd, and Docker Compose.\nLatest\nSpecific version"),(0,n.kt)("p",null,"To install the latest version, run:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n")),(0,n.kt)("p",null,"Verify that the Docker Engine installation is successful by running the hello-world image:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," sudo docker run hello-world\n")),(0,n.kt)("p",null,"This command downloads a test image and runs it in a container. When the container runs, it prints a confirmation message and exits."),(0,n.kt)("h2",{id:"setting-up-docker-swarm-with-traefik-and-portainer"},"Setting up docker swarm with traefik and portainer"),(0,n.kt)("h2",{id:"intro"},"Intro"),(0,n.kt)("p",null,"In this post we will see how to create a docker swarm and deploy traefik and portainer in a debian server."),(0,n.kt)("h3",{id:"what-is-traefik"},"What is traefik?"),(0,n.kt)("p",null,"Traefik is a leading modern reverse proxy and load balancer that makes deploying microservices easy. Traefik integrates with your existing infrastructure components and configures itself automatically and dynamically."),(0,n.kt)("p",null,"For more info visit : ",(0,n.kt)("a",{parentName:"p",href:"https://traefik.io/traefik"},"https://traefik.io/traefik"),"\nWhat is portainer?"),(0,n.kt)("p",null,"Portainer is the definitive container management tool for Docker, Docker Swarm with it's highly intuitive GUI and API. Portainer is a fully featured management tool for Docker. It runs locally, giving developers a rich UI to build and publish container images, deploy and manage applications and leverage data persistence and horizontal scaling for their applications. And, once an application is deployed into a container, Portainer makes it easy for users to secure, monitor and measure the performance of the platform. The tool negates the need for developers to learn Infrastructure as Code and makes it easy for them to maximize their efficiency which means both users and organizations love it."),(0,n.kt)("p",null,"For more info visit: ",(0,n.kt)("a",{parentName:"p",href:"https://www.portainer.io/"},"https://www.portainer.io/")),(0,n.kt)("h3",{id:"what-is-docker-swarm"},"What is Docker Swarm?"),(0,n.kt)("p",null,"Docker swarm is a container orchestration tool, meaning that it allows the user to manage multiple containers deployed across multiple host machines. One of the key benefits associated with the operation of a docker swarm is the high level of availability offered for applications."),(0,n.kt)("p",null,"For more info: ",(0,n.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/swarm/"},"https://docs.docker.com/engine/swarm/")),(0,n.kt)("h3",{id:"init-docker-swarm"},"Init Docker Swarm"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"}," Know your ip ")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"ip addr\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker swarm init --advertise-addr 10.0.0.3 # change the ip here with your machine ip\n")),(0,n.kt)("p",null,"This will initialize docker in swarm mode and also display a join token for the other machines to join the cluster."),(0,n.kt)("h3",{id:"create-a-traefik-network"},"Create a traefik network"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker network create --driver overlay traefik-public \n")),(0,n.kt)("p",null,"This is our primary network for the traefik."),(0,n.kt)("h3",{id:"create-a-htpasswd-password"},"Create a htpasswd password"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'sudo docker run --rm httpd:2.4-alpine htpasswd -nbB admin <password> | cut -d ":" -f 2\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"}," Escape the $ sign in the password by adding one more $ to the generated password. We need this password to protect our end point in the traefik proxy. ")),(0,n.kt)("p",null,"Keep this password safe we will need it later."),(0,n.kt)("h3",{id:"create-folders-for-traefik"},"Create folders for Traefik"),(0,n.kt)("p",null,"create a folder and set 600 as permission."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /mnt/data\nmkdir /mnt/data/traefik\ntouch /mnt/data/traefik/acme.json\nchmod 600 /mnt/data/traefik/acme.json\nmkdir /mnt/compose \n")),(0,n.kt)("p",null,"for Portainer"),(0,n.kt)("p",null,"mkdir /mnt/data/portainer"),(0,n.kt)("h3",{id:"traefik-docker-compose"},"Traefik docker compose"),(0,n.kt)("p",null,"Traefik is our main reverse proxy and it will sit in front of all out application. we will control all the routes to our containers using traefik."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd /mnt/compose\ntouch traefik.yml\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3.3"\n\nservices:\n  traefik:\n    image: "traefik:latest"\n    command:\n      - --log.level=INFO\n      - --entrypoints.web.address=:80\n      - --entrypoints.websecure.address=:443\n      - --providers.docker\n      - --providers.docker.exposedbydefault=false\n      - --providers.docker.swarmmode=true\n      - --providers.docker.network=traefik-public\n      - --api\n      - --api.dashboard=true\n      - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory\n      # update your email here\n      - --certificatesresolvers.leresolver.acme.email=valentino.folio@yourdomain.com\n      # Make sure the this file is available and permission is set correctly\n      - --certificatesresolvers.leresolver.acme.storage=/le/acme.json\n      - --certificatesresolvers.leresolver.acme.tlschallenge=true\n    ports:\n      - "80:80"\n      - "443:443"\n    networks:\n      - traefik-public\n    volumes:\n      - "/var/run/docker.sock:/var/run/docker.sock:ro"\n      # Make sure the volume folder is created\n      - "/mnt/data/traefik/acme.json:/le/acme.json"\n    deploy:\n      labels:\n        # Dashboard\n        - "traefik.enable=true"\n        # Change the host url here\n        - "traefik.http.routers.traefik.rule=Host(`traefik.yourdomain.com`)"\n        - "traefik.http.routers.traefik.service=api@internal"\n        - "traefik.http.services.traefik.loadbalancer.server.port=8080"\n        - "traefik.http.routers.traefik.tls.certresolver=leresolver"\n        - "traefik.http.routers.traefik.entrypoints=websecure"\n        - "traefik.http.routers.traefik.middlewares=authtraefik"\n        # Change the auth password here\n        - "traefik.http.middlewares.authtraefik.basicauth.users=admin:$$2y$$05$$bgRr0cehUg8CL8us4u80UuIsy.kDi9DjVNdCuXhVEHF626kIE5Glu" # user/password\n\n        # global redirect to https\n        - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"\n        - "traefik.http.routers.http-catchall.entrypoints=web"\n        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"\n\n        # middleware redirect\n        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"\n\n  my-app:\n    image: containous/whoami:latest\n    networks:\n      - traefik-public\n    command:\n      - --port=8082 # Our service listens on 8082\n    deploy:\n      labels:\n        - "traefik.enable=true"\n        # Change the host url here\n        - "traefik.http.routers.my-app.rule=Host(`whoami.test.yourdomain.com`)"\n        - "traefik.http.services.my-app.loadbalancer.server.port=8082"\n        - "traefik.http.routers.my-app.middlewares=auth"\n        - "traefik.http.routers.my-app.entrypoints=websecure"\n        - "traefik.http.routers.my-app.tls=true"\n        - "traefik.http.routers.my-app.tls.certresolver=leresolver"\n        # Change the password here\n        - "traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$05$$bgRr0cehUg8CL8us4u80UuIsy.kDi9DjVNdCuXhVEHF626kIE5Glu" # user/password\n\nnetworks:\n  traefik-public:\n    external: true\n\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," docker stack deploy -c traefik.yml traefik\n")),(0,n.kt)("h3",{id:"portainer"},"Portainer"),(0,n.kt)("p",null,"Portainer is our container management software. We will use to deploy our docker containers."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3.2"\n\nservices:\n  agent:\n    image: portainer/agent\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /var/lib/docker/volumes:/var/lib/docker/volumes\n    networks:\n      - traefik-public\n    deploy:\n      mode: global\n      placement:\n        constraints: [node.platform.os == linux]\n\n  portainer:\n    image: portainer/portainer\n    command: -H tcp://tasks.agent:9001 --tlsskipverify\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      # make sure the folder is available (mkdir /mnt/data/portainer)\n      - /mnt/data/portainer:/data\n    networks:\n      - traefik-public\n    deploy:\n      labels:\n        - "traefik.enable=true"\n        # change the host here\n        - "traefik.http.routers.portainer.rule=Host(`admin.test.yourdomain.com`)"\n        - "traefik.http.services.portainer.loadbalancer.server.port=9000"\n        - "traefik.http.routers.portainer.entrypoints=websecure"\n        - "traefik.http.routers.portainer.tls=true"\n        - "traefik.http.routers.portainer.tls.certresolver=leresolver"\n      mode: replicated\n      placement:\n        constraints: [node.role == manager]\n\nnetworks:\n  traefik-public:\n    external: true\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," docker stack deploy -c portainer.yml portainer\n")),(0,n.kt)("h2",{id:"deploy-new-app-with-docker-compose"},"Deploy new app with docker-compose"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"login to portainer and create a new stack (admin.test.yourdomain.com)"),(0,n.kt)("li",{parentName:"ol"},"copy the docker-compose.yml file"),(0,n.kt)("li",{parentName:"ol"},"create the directory /mnt/data/appname"),(0,n.kt)("li",{parentName:"ol"},"click on deploy the stack")),(0,n.kt)("h3",{id:"example-for-deploying-gitlab-ce"},"Example for deploying gitlab CE"),(0,n.kt)("p",null,"Login ssh to your server dans create the directory"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"    mkdir /mnt/gitlabce\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Create stack on portainer")),(0,n.kt)("p",null,'Select you environment and click on "Add stack"'),(0,n.kt)("p",null,'Copy the docker-compose.yml file and click on "Deploy the stack". Please make sure the directory (volumes in docker compose) is created.'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yml"},'version: \'3\'\n\nservices:\n  gitlabce:\n    image: gitlab/gitlab-ce\n    networks:\n      - traefik-public\n    environment:\n      ACCEPT_EULA: "Y"\n      GITLAB_ROOT_PASSWORD: "gitlabpass"\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url gitlab.test.yourdomain.com\n        gitlab_rails[\'smtp_enable\'] = true\n    volumes:\n      # make sure the folder is available (mkdir /mnt/gitlabce)\n      - /mnt/gitlabce:/data\n    deploy:\n      labels:\n        - "traefik.enable=true"\n        - "traefik.http.routers.gitlabce.rule=Host(`gitlab.test.yourdomain.com`)"\n        - "traefik.http.services.gitlabce.loadbalancer.server.port=80"\n        \nnetworks:\n  traefik-public:\n    external: true\n')),(0,n.kt)("h2",{id:"deploy-mattermost"},"Deploy mattermost"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"    mkdir /mnt/mattermost\n    # mkdir /etc/localtime # if not exist\n\n    mkdir -p /mnt/mattermost/app/config\n    mkdir -p /mnt/mattermost/app/data\n    mkdir -p /mnt/mattermost/app/logs\n    mkdir -p /mnt/mattermost/app/plugins\n    mkdir -p /mnt/mattermost/app/client-plugins\n    mkdir -p /mnt/mattermost/db\n\n    sudo chown -R 2000:2000 /mnt/mattermost/app\n    sudo chmod -R 0750 /mnt/mattermost/app\n    sudo chown -R 2000:2000 /mnt/mattermost/app/plugins\n    sudo chmod -R 0750 /mnt/mattermost/app/plugins\n    sudo chown -R 2000:2000 /mnt/mattermost/app/client-plugins\n    sudo chmod -R 0750 /mnt/mattermost/app/client-plugins\n\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Create stack on portainer")),(0,n.kt)("p",null,'Select you environment and click on "Add stack"'),(0,n.kt)("p",null,'Copy the docker-compose.yml file and click on "Deploy the stack". Please make sure the directory (volumes in docker compose) is created.'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3.8"\n\nservices:\n  db:\n    image: postgres:13\n    networks:\n      - traefik-public\n    environment:\n      - POSTGRES_USER=mmuser # change this with your own username or by an environment variable\n      - POSTGRES_PASSWORD=mmuser_password # change this with your own ids or by an environment variable\n      - POSTGRES_DB=mattermost # change this with your own ids or by an environment variable\n    volumes:\n      - /mnt/mattermost/db:/var/lib/postgresql/data\n      - /etc/localtime:/etc/localtime:ro\n\n  app:\n    image: mattermost/mattermost-team-edition\n    networks:\n      - traefik-public\n    environment:\n        # change this with your own ids or by an environment variable\n      - MM_USERNAME=mmuser\n      - MM_PASSWORD=mmuser_password\n      - MM_DBNAME=mattermost\n      - MM_SQLSETTINGS_DATASOURCE=postgres://mmuser:mmuser_password@db:5432/mattermost?sslmode=disable&connect_timeout=10\n    volumes:\n      - /mnt/mattermost/app/config:/mattermost/config:rw\n      - /mnt/mattermost/app/data:/mattermost/data:rw\n      - /mnt/mattermost/app/logs:/mattermost/logs:rw\n      - /mnt/mattermost/app/plugins:/mattermost/plugins:rw\n      - /mnt/mattermost/app/client-plugins:/mattermost/client/plugins:rw\n      - /etc/localtime:/etc/localtime:ro\n    deploy:\n      labels:\n        - "traefik.enable=true"\n        - "traefik.docker.network=traefik-public"\n        - "traefik.http.routers.mattermost.entrypoints=websecure"\n        # change the host here\n        - "traefik.http.routers.mattermost.rule=Host(`mattermost.test.domain.com`)"\n        - "traefik.http.routers.mattermost.tls=true"\n        - "traefik.http.routers.mattermost.tls.certresolver=leresolver"\n        - "traefik.http.services.mattermost.loadbalancer.server.port=8065"\n\nnetworks:\n  traefik-public:\n    external: true\n')))}m.isMDXComponent=!0}}]);